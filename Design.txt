ON CHAIN
- Ogni nodo della blockchain viene associato a un wallet specifico (Fornitore, Trasformatore, Cliente)
- ERC-721: implementazione della libreria di Open Zeppelin per la gestione di tutti gli NFT del progetto. Associa ad ogni prodotto l'NFT associato.
	- Funzione di Mint (serve al fornitore per creare l'NFT e inserire in esso la carbon footprint delle materie prime)
	- Funzione di Transfer
	- Funzione di calcolo
	- Funzione per aggiungere carbon footprint di una trasformazione
	- NFT: Certificato della Carbon Footprint. Creato dal "Fornitore". Il "Fornitore" passa NFT al "Trasformatore" quando gli cede le materie prime.
		- Carbon Footprint iniziale del produttore
		- Array delle trasformazioni (se il trasformatore è solo uno) / struttura dati più complessa per gestire i casi con più trasformatori o se vogliamo tenere più tracce sulle trasformazioni
		  Nell'ultimo elemento si mette la carbon footprint complessiva
		- Booleano che indica il completamento delle trasformazioni
		- Id
		- Nome del prodotto
		- Nome della materia prima
		
- Contratto che tiene tutte le funzioni degli attori
	- Mapping che associa ad ogni id dell'attore il ruolo associato
	- Metodo che prende dal mapping il ruolo associato a un certo id
	- Funzione per aggiungere carbon footprint che richiama quella di openzeppelin
	- Funzione che fa la query sui prodotti (nome prodotto, carbon footprint, ecc...)
	- (Funzione per ricercare le materie prime dei produttori non ancora prese (con array vuoto))

-------------------------------------------------------------------------------------------------------------
OFF CHAIN
- Main: fa il "log in"
	- Chiede Id
	- Chi sei
	- Cosa vuoi
- File JSON per ABI
- Un file per ogni ruolo (con script o classe)
	- collegamento alla blockchain (qui o nel main)
	- lista di operazioni per ogni utente
	- per ogni operazione: sanificazione, autorizzazione
