{
	"compiler": {
		"version": "0.8.3+commit.8d00100c"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "defaultSupplier",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "defaultTransformer",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "userAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "enum User.Role",
						"name": "role",
						"type": "uint8"
					}
				],
				"name": "newUser",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "uint16",
						"name": "carbon_fp",
						"type": "uint16"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "isEnded",
						"type": "bool"
					}
				],
				"name": "addTransformation",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "product_name",
						"type": "string"
					},
					{
						"internalType": "string[]",
						"name": "raw_material",
						"type": "string[]"
					},
					{
						"internalType": "uint256[]",
						"name": "lots",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256",
						"name": "carbon_fp",
						"type": "uint256"
					}
				],
				"name": "createProduct",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint8",
						"name": "role",
						"type": "uint8"
					}
				],
				"name": "createUser",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getProducts",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "productId",
								"type": "uint256"
							},
							{
								"internalType": "string",
								"name": "name",
								"type": "string"
							},
							{
								"internalType": "address",
								"name": "currentOwner",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "CF",
								"type": "uint256"
							},
							{
								"internalType": "bool",
								"name": "ended",
								"type": "bool"
							}
						],
						"internalType": "struct ProductLibrary.Product[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "wallet",
						"type": "address"
					}
				],
				"name": "getRole",
				"outputs": [
					{
						"internalType": "enum User.Role",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getRole",
				"outputs": [
					{
						"internalType": "enum User.Role",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "transferCP",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "The owner of the `CarbonFootprint` contract is this contract.",
			"kind": "dev",
			"methods": {
				"addTransformation(uint16,uint256,bool)": {
					"details": "Calls the function `addCF` from `CarbonFootprint` contract.",
					"params": {
						"carbon_fp": "The carbon footprint relating to transformer actions.",
						"isEnded": "Specifies if this is the last transformation.",
						"tokenId": "The id of the product to add the carbon footprint to."
					}
				},
				"constructor": {
					"details": "Initializes the contract by setting a default supplier and a default transformer.\tAlso it sets the `owner` of the contract to `msg.sender`."
				},
				"createProduct(string,string[],uint256[],uint256)": {
					"details": "Calls the function `mintProduct` from `CarbonFootprint` contract.",
					"params": {
						"carbon_fp": "The carbon footprint relating to supplier actions.",
						"lots": "The array of lots of rawmaterials",
						"product_name": "The name to assign to the product.",
						"raw_material": "The array of rawmaterials used to produce the product."
					}
				},
				"createUser(uint8)": {
					"params": {
						"role": "The role to set. (1=Supplier, 2=Transformer)."
					}
				},
				"getProducts()": {
					"returns": {
						"_0": "An array of `ProductLibrary.Product`."
					}
				},
				"getRole()": {
					"returns": {
						"_0": "The role of the address specified."
					}
				},
				"getRole(address)": {
					"params": {
						"wallet": "The address of the user that you want to retrieve the role."
					},
					"returns": {
						"_0": "The role of the address specified."
					}
				},
				"transferCP(address,uint256)": {
					"params": {
						"recipient": "The address of the recipient to transfer the product to.",
						"tokenId": "The id of the product to be transferred."
					}
				}
			},
			"stateVariables": {
				"CFContract": {
					"details": "Initializes the `CarbonFootprint` contract."
				}
			},
			"title": "A proxy for `CarbonFootprint` contract that also manages users.",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"addTransformation(uint16,uint256,bool)": {
					"notice": "Add a carbon footprint relating to transformer actions."
				},
				"createProduct(string,string[],uint256[],uint256)": {
					"notice": "Creates a product with specified name, raw material and initial carbon footprint."
				},
				"createUser(uint8)": {
					"notice": "Function that associate the Role `role` to `msg.sender`."
				},
				"getProducts()": {
					"notice": "Returns all the products currently present in `CarbonFootprint` contract"
				},
				"getRole()": {
					"notice": "Retrieves the role of `msg.sender`."
				},
				"getRole(address)": {
					"notice": "Retrieves the role of the address specified."
				},
				"transferCP(address,uint256)": {
					"notice": "Transfer the ownership of the product with product id `tokenId` to the address `recipient`"
				}
			},
			"notice": "A user can use this contract to manage carbon footprints of all products.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"PycharmProjects/progetto-software-cybersecurity/contracts/User.sol": "User"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/token/ERC721/ERC721.sol": {
			"keccak256": "0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de",
			"license": "MIT",
			"urls": [
				"bzz-raw://cbc4803332d45dff58f865ed21c942fe4668e47cc7196c8dfe84102040b1d70f",
				"dweb:/ipfs/QmXhZLsocznRWCSyhjo3vo66Z1VsuuNptAVb6ASPYsWtGx"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
			"keccak256": "0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990",
			"license": "MIT",
			"urls": [
				"bzz-raw://a439187f7126d31add4557f82d8aed6be0162007cd7182c48fd934dbab8f3849",
				"dweb:/ipfs/QmRPLguRFvrRJS7r6F1bcLvsx6q1VrgjEpZafyeL8D7xZh"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
			"keccak256": "0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f",
			"license": "MIT",
			"urls": [
				"bzz-raw://33017a30a99cc5411a9e376622c31fc4a55cfc6a335e2f57f00cbf24a817ff3f",
				"dweb:/ipfs/QmWNQtWTPhA7Lo8nbxbc8KFMvZwbFYB8fSeEQ3vuapSV4a"
			]
		},
		"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
			"keccak256": "0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9",
			"license": "MIT",
			"urls": [
				"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146",
				"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf"
			]
		},
		"@openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87",
			"license": "MIT",
			"urls": [
				"bzz-raw://b3a57d0854b2fdce6ebff933a48dca2445643d1eccfc27f00292e937f26c6a58",
				"dweb:/ipfs/QmW45rZooS9TqR4YXUbjRbtf2Bpb5ouSarBvfW1LdGprvV"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		"@openzeppelin/contracts/utils/Strings.sol": {
			"keccak256": "0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45",
			"license": "MIT",
			"urls": [
				"bzz-raw://8179c356adb19e70d6b31a1eedc8c5c7f0c00e669e2540f4099e3844c6074d30",
				"dweb:/ipfs/QmWFbivarEobbqhS1go64ootVuHfVohBseerYy9FTEd1W2"
			]
		},
		"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b",
			"license": "MIT",
			"urls": [
				"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d",
				"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
			"license": "MIT",
			"urls": [
				"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
				"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
			]
		},
		"PycharmProjects/progetto-software-cybersecurity/contracts/CarbonFootprint.sol": {
			"keccak256": "0x9846858ad974100a770c33fa8aab411922e51f8c5447976cbd347ecbeca83008",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://fa285e1213a405fc221d1b191018bd4c134cb127c4366721e35d6ee9f3a3b5eb",
				"dweb:/ipfs/QmU6EkUb2wbq2MdYixRmVpPziJVVziSWiRS2RwXZUXgTjk"
			]
		},
		"PycharmProjects/progetto-software-cybersecurity/contracts/ProductLibrary.sol": {
			"keccak256": "0x71cc43cc8e786baf6f85e4769c08dd160729d25b0f79dab8ffe7435dba45db28",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://be2b957e5845342e137aa3975af3eaf4a8ff708ae3ab49c180ee87a08aeb3d04",
				"dweb:/ipfs/QmaGjibbsb9HgfqsPcg4E82cah6XMTbLK9v2X6GKM4KkeG"
			]
		},
		"PycharmProjects/progetto-software-cybersecurity/contracts/User.sol": {
			"keccak256": "0x78c08cc19c38f7ea968ba9cd6cb22f835f7e1067849cdf40773c921acaa22263",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://0de3ff9e1d8d30949332f73b09b0484a7f38df597f5b3b8a57611a55a9f7cefd",
				"dweb:/ipfs/QmadGv3y61Dw9YZwkNdSEYxPDBiFCRqhAb2my9rqBL4gZa"
			]
		}
	},
	"version": 1
}